//: [Previous](@previous)

import Foundation
import Combine

// ---------------------------------------------------------------------------------
//
// –î–ó ‚Ññ6
// 1. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –≤–Ω—É—Ç—Ä–∏ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –Ω–∞ –ø—Ä–æ—à–ª–æ–º —É—Ä–æ–∫–µ API –∫–ª–∏–µ–Ω—Ç–∞.
//
// ---------------------------------------------------------------------------------

var cancellables = Set<AnyCancellable>()

// –ï–Ω—É–º—á–∏–∫ —Å –æ—à–∏–±–∫–∞–º–∏
enum MyError: Error {
    case fetchingError, decodingError
}

extension MyError: LocalizedError {
    public var errorDescription: String? {
        switch self {
        case .fetchingError:
            return "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞."
        case .decodingError:
            return "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."
        }
    }
}

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ Genderize.io
// –ò–º—è, –ø–æ–ª, –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –ë–î.
struct GenderizeResponse: Codable {
    let name, gender: String
    let probability: Double
    let count: Int
}

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ Nationalize.io
// –ò–º—è, –º–∞—Å—Å–∏–≤ –∫–æ–¥–æ–≤ —Å—Ç—Ä–∞–Ω —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –Ω–æ—Å–∏—Ç–µ–ª—è —ç—Ç–æ–≥–æ –∏–º–µ–Ω–∏ –∫ —Å—Ç—Ä–∞–Ω–µ.
struct NationalizeResponse: Codable {
    let name: String
    let country: [Country]?
    
    struct Country: Codable {
        let countryId: String
        let probability: Double
        
        enum CodingKeys: String, CodingKey {
            case countryId = "country_id"
            case probability
        }
    }
}

//1. –ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ—Å—Ç–µ–π—à–∏–π –∫–ª–∏–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ –ª—é–±–æ–º—É –æ—Ç–∫—Ä—ã—Ç–æ–º—É API, –∏—Å–ø–æ–ª—å–∑—É—è Combine –≤ –∑–∞–ø—Ä–æ—Å–∞—Ö. (–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Ç–æ–¥–æ–≤ API: 2).
//2. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ª–∞–¥–∫—É –ª—é–±—ã—Ö –¥–≤—É—Ö –∏–∑–¥–∞—Ç–µ–ª–µ–π –≤ –∫–æ–¥–µ.
class NameApi {
    var cancellables = Set<AnyCancellable>()
    
    // –ò–º—è, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ –∏ –ø–æ–ª —á–µ–ª–æ–≤–µ–∫–∞.
    let name: String
    
    // –ë–∞–∑–æ–≤—ã–µ URL API.
    private let baseUrlNationalizeApi = "https://api.nationalize.io/?name="
    private let baseUrlGenderizeApi = "https://api.genderize.io/?name="
    
    init(_ name: String) {
        self.name = name
    }
    
    func fetch() {
        let publisher = Publishers.Zip(fetchGender(), fetchNation())
        
        publisher
            .sink(receiveCompletion: { completion in
                switch completion {
                case .failure(let error): print(error.localizedDescription)
                case .finished: break
                }
            },
                  receiveValue: { value in
                let gender = value.0.gender == "male" ? "üë®üèª (–º—É–∂—Å–∫–æ–π)" : "üë©üèª (–∂–µ–Ω—Å–∫–∏–π)"
                
                print("–ò–º—è: \(self.name)")
                print("–ü–æ–ª: \(gender) —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é \(value.0.probability * 100) % –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ \(value.0.count) –∑–∞–ø–∏—Å–µ–π –≤ –ë–î.")
                
                if let countries = value.1.country {
                    for country in countries {
                        print("\(self.flagEmoji(from: country.countryId)) \(self.countryName(from: country.countryId) ?? "–ù/–î") —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é \((country.probability * 100).rounded()) %.")
                    }
                }
                
                print()
                print()
            })
        .store(in: &cancellables)
    }
    
    private func fetchNation() -> AnyPublisher<NationalizeResponse, Error> {
        let url = URL(string: baseUrlNationalizeApi + name)!
        
        return URLSession.shared.dataTaskPublisher(for: url)
            .mapError { error -> MyError in return MyError.fetchingError }
            .map { $0.data }
            .decode(type: NationalizeResponse.self, decoder: JSONDecoder())
            .mapError { error -> MyError in return MyError.decodingError }
            //.replaceError(with: MyError.fetchingError)
            .eraseToAnyPublisher()
    }
    
    private func fetchGender() -> AnyPublisher<GenderizeResponse, Error> {
        let url = URL(string: baseUrlGenderizeApi + name)!
        
        return URLSession.shared.dataTaskPublisher(for: url)
            .mapError { error -> MyError in return MyError.fetchingError }
            .map { $0.data }
            .decode(type: GenderizeResponse.self, decoder: JSONDecoder())
            .mapError { error -> MyError in return MyError.decodingError }
            //.replaceError(with: GenderizeResponse(name: "", gender: "", probability: 0, count: 0))
            .eraseToAnyPublisher()
    }
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã –≤ —ç–º–æ–¥–∑–∏ —Ñ–ª–∞–≥–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω—ã.
    private func flagEmoji(from countryCode: String) -> String {
        let base: UInt32 = 127397
        return countryCode.uppercased().unicodeScalars.map { String(UnicodeScalar(base + $0.value)!) }.joined()
    }
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã –≤ –Ω–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω—ã –≤ —Ç–µ–∫—É—â–µ–π –ª–æ–∫–∞–ª–∏.
    private func countryName(from countryCode: String) -> String? {
        return (Locale.current as NSLocale).displayName(forKey: .countryCode, value: countryCode)
    }
}

// –ü–∞–±–ª–∏—à–µ—Ä, –∏—Å–ø—É—Å–∫–∞—é—â–∏–π —Å—Ç—Ä–æ–∫–∏ —Å –∏–º–µ–Ω–∞–º–∏, –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ –∏ –ø–æ–ª –∫–æ—Ç–æ—Ä—ã—Ö –º—ã –±—É–¥–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å —Å –ø–æ–º–æ—â—å—é –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ API.
let namesPublisher = ["Yaroslav", "Vyacheslav", "Slava", "Meruert", "Fatma", "Anna", "Cthulhu", "Lenin", "Pedro", "Dazdraperma", "Kumar", "Motherfucker", "Jah"].publisher

// –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –∏ –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ –¥–≤—É–º —Ä–∞–∑–ª–∏—á–Ω—ã–º API –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª–∞ –∏ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–∞.
namesPublisher
    .sink { value in NameApi(value).fetch() }
    .store(in: &cancellables)

//: [Next](@next)
